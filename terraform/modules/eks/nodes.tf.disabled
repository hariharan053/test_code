locals {
  main-node-userdata = <<USERDATA
#!/bin/bash
set -o xtrace
/etc/eks/bootstrap.sh --apiserver-endpoint '${aws_eks_cluster.main.endpoint}' --b64-cluster-ca '${aws_eks_cluster.main.certificate_authority.0.data}' '${var.cluster-name}' >/tmp/out.txt
sudo yum update -y
sudo amazon-linux-extras install docker
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
setenforce 0
yum install -y kubelet
systemctl enable kubelet && systemctl start kubelet
USERDATA
}

resource "aws_launch_configuration" "main" {
  count                       = "${var.fargate_enable == "true" ? 0 : length(var.worker_instance_types)}"
  associate_public_ip_address = false
  iam_instance_profile        = "${aws_iam_instance_profile.node.name}"
  image_id                    = "${var.ami_id}"
  key_name                    = "${var.key_name}"
  instance_type               = "${var.worker_instance_types[count.index]}"
  name_prefix                 = "${format("%s-eks-nodes",var.environment)}"
  security_groups             = ["${aws_security_group.node.id}"]
  user_data_base64            = "${base64encode(local.main-node-userdata)}"

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "main" {
  count                = "${var.fargate_enable == "true" ? 0 : length(var.worker_instance_types)}"
  desired_capacity     = "${element(split(",",lookup(var.workers_instance_count, var.worker_instance_types[count.index])),0)}"
  launch_configuration = "${element(aws_launch_configuration.main.*.id, count.index)}"
  max_size             = "${element(split(",",lookup(var.workers_instance_count, var.worker_instance_types[count.index])),1)}"
  min_size             = "${element(split(",",lookup(var.workers_instance_count, var.worker_instance_types[count.index])),0)}"
  name                 = "${format("%s-eks-nodes",var.environment)}"
  vpc_zone_identifier  = ["${var.private-subnets}"]

  lifecycle {
    ignore_changes = ["desired_capacity", "max_size", "min_size"]
  }

  tag {
    key                 = "Name"
    value               = "${format("%s-eks-nodes",var.environment)}"
    propagate_at_launch = true
  }

  tag {
    key                 = "kubernetes.io/cluster/${var.cluster-name}"
    value               = "owned"
    propagate_at_launch = true
  }

  tag {
    key                 = "k8s.io/cluster-autoscaler/enabled"
    value               = ""
    propagate_at_launch = true
  }

  tag {
    key                 = "k8s.io/cluster-autoscaler/${var.cluster-name}"
    value               = ""
    propagate_at_launch = true
  }

  tag {
    key                 = "Inspector"
    value               = "true"
    propagate_at_launch = true
  }

  tag {
    key                 = "Patch Group"
    value               = "${var.install_patch_groups}"
    propagate_at_launch = true
  }

  tag {
    key = "Backup"
    value = "true"
    propagate_at_launch = true
  }

  tag {
    key = "BackupCopyToDR"
    value = "true"
    propagate_at_launch = true
  }
}
